---
description: Next.js アプリでデータ取得やデータ更新（作成、削除、変更）時のルール
alwaysApply: false
---

## データベースとの接続

packagesの drizzle を使う。

## データ取得時

1. /app/api/ に ルートハンドラー(route.ts) を作成
2. ルートハンドラー内で適切に権限検証を行う
3. /swr/ にデータ取得用の swr フックを作成し、作成したルートをfetchする
4. 関連コンポーネントからSWRフックを使用する

## データ更新時

1. /actions/ に サーバーアクションを作成("use server" をファイル先頭に追加)
2. swr フックの mutate を使ってデータ更新とUI更新を一緒に行う
3. 即反映が必要な場合、swr の mutate で optimistic オプションを使用する

以下は optimistic を使用する例

```tsx
const createTask = useCallback(
  (data: Task) => {
    return mutate(
      async () => {
        await createTaskAction(data);
        return undefined;
      },
      {
        optimisticData: () => {
          return data;
        },
        populateCache: false, // 必要
        rollbackOnError: true, // 必要
      }
    );
  },
  [mutate, taskViewId]
);
```
